name: CI/CD - ssok backend

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Build with Gradle
        if: ${{ hashFiles('**/gradlew') != '' }}
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Build with Maven
        if: ${{ hashFiles('**/mvnw') != '' }}
        run: |
          chmod +x ./mvnw
          ./mvnw -B -DskipTests package

      - name: List potential JARs
        run: |
          echo "=== Gradle build/libs ==="
          find . -path "*/build/libs/*.jar" -print || true
          echo "=== Maven target ==="
          find . -path "*/target/*.jar" -print || true

      - name: Collect JARs for artifact
        run: |
          set -e
          mkdir -p dist
          find . -path "*/build/libs/*.jar" -not -name "*plain*.jar" -exec cp {} dist/ \; || true
          find . -path "*/target/*.jar" -not -name "*sources*.jar" -not -name "*javadoc*.jar" -exec cp {} dist/ \; || true
          echo "Collected in dist/:"
          ls -l dist || true
          if [ -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "No JARs collected. Check your build settings."; exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: dist/*.jar
          if-no-files-found: error

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: app-dist

      - name: Inspect downloaded files
        run: |
          echo "Downloaded to app-dist:"
          ls -l app-dist

      - name: Pick JAR
        id: pick
        shell: bash
        run: |
          set -e
          JAR_PATH=$(ls app-dist/*.jar | head -n 1)
          [ -z "$JAR_PATH" ] && echo "No JAR found in app-dist" && exit 1
          echo "Picked: $JAR_PATH"
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Rename for upload
        run: |
          set -e
          cp "${{ steps.pick.outputs.jar_path }}" app-dist/app.jar
          ls -l app-dist/app.jar

      - name: Prepare server dirs
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            mkdir -p /home/ubuntu/app/releases
            # 혹시 남아있는 폴더 구조 정리
            rm -rf /home/ubuntu/app/releases/app-dist || true
            # 이전 파일 정리(옵션)
            # rm -f /home/ubuntu/app/releases/app.jar || true
            chown -R $USER:$USER /home/ubuntu/app

      # ✅ strip_components: 1 로 상위 폴더(app-dist) 제거 후, target 디렉터리에 "app.jar"로 업로드됨
      - name: Copy JAR to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: app-dist/app.jar
          target: /home/ubuntu/app/releases/
          strip_components: 1
          overwrite: true

      - name: Restart service
        uses: appleboy/ssh-action@v1.2.0
        env:
          HEALTH_URL: http://127.0.0.1:8080/actuator/health
          BASIC_USER: ${{ secrets.BASIC_USER }} # 선택
          BASIC_PASS: ${{ secrets.BASIC_PASS }} # 선택
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: HEALTH_URL,BASIC_USER,BASIC_PASS
          script: |
            set -Eeuo pipefail
            APP_DIR="/home/ubuntu/app"
            REL_DIR="$APP_DIR/releases"
            UPLOADED="$REL_DIR/app.jar"
            VERSIONED="$REL_DIR/${{ github.sha }}.jar"

            if [ ! -f "$UPLOADED" ]; then
              echo "[ERROR] Uploaded jar not found: $UPLOADED"
              ls -l "$REL_DIR" || true
              exit 1
            fi

            echo "[INFO] Renaming to versioned jar: $VERSIONED"
            mv -f "$UPLOADED" "$VERSIONED"

            echo "[INFO] Updating current.jar symlink"
            ln -sfn "$VERSIONED" "$APP_DIR/current.jar"

            echo "[INFO] Restarting service: ${{ secrets.SERVICE_NAME }}"
            sudo systemctl daemon-reload || true
            sudo systemctl restart "${{ secrets.SERVICE_NAME }}"

            CURL_OPTS=("-s" "-o" "/dev/null" "-w" "%{http_code}")
            if [ -n "${BASIC_USER:-}" ] && [ -n "${BASIC_PASS:-}" ]; then
              CURL_OPTS+=("-u" "${BASIC_USER}:${BASIC_PASS}")
            fi

            echo "[INFO] Waiting for health..."
            for i in {1..30}; do
              code=$(curl "${CURL_OPTS[@]}" "$HEALTH_URL" || true)
              if [ "$code" = "200" ]; then
                echo "[OK] Healthcheck passed"
                exit 0
              fi
              sleep 2
            done

            echo "[ERROR] Healthcheck failed"
            sudo systemctl status "${{ secrets.SERVICE_NAME }}" --no-pager || true
            sudo journalctl -u "${{ secrets.SERVICE_NAME }}" -n 200 --no-pager || true
            exit 1
